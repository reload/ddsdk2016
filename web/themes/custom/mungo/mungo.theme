<?php

/**
 * @file
 * Main theme-file for the Mungo theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function mungo_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  if (in_array($variables['field_name'], ['field_caption', 'field_byline'])) {
    // Handle various main-media fields.
    _mungo_preprocess_field_main_media($field_name, $variables);
  }
  elseif (in_array($field_name,
    [
      'field_event_teaser',
      'field_subtitle',
      'field_formatted_text',
    ]
  )) {
    _mungo_preprocess_text_field($field_name, $variables);
  }
  elseif (in_array($field_name, ['field_factbox_text'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'factbox__body';
  }
  elseif (in_array($field_name, ['field_video'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'video';
  }
  elseif (in_array($field_name, ['field_video_caption'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'caption';
  }
  elseif (in_array($field_name, ['field_2col_deck_col1', 'field_2col_deck_col2'])) {
    /** @var Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];
    $sizes = _mungo_2col_size_option_to_text($paragraph->get('field_2col_column_size')->value);
    // Detect the field that is being rendered as the large part of the
    // two-column deck. It's items should take up 50% of the column aka
    // 6 cols.
    $variables['item_col_classes'] = [];
    if ($sizes === '66_33' && $field_name === 'field_2col_deck_col1') {
      $variables['item_col_classes'][] = 'col-md-6';
    }
    elseif ($sizes === '33_66' && $field_name === 'field_2col_deck_col2') {
      $variables['item_col_classes'][] = 'col-md-6';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mungo_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#placeholder'] = t('Search for activities, events, papers etc.');
  $form['actions']['search_submit'] = array(
    '#type' => 'html_tag',
    '#tag' => 'button',
    '#value' => '<span class="glyphicon glyphicon-search"></span>',
  );
}

/**
 * Internal function for processing main media fields.
 *
 * @param string $field_name
 *   The field currently being preprocessed.
 * @param array $variables
 *   Variables to preprocess.
 */
function _mungo_preprocess_field_main_media($field_name, &$variables) {
  if ($field_name == 'field_caption') {
    $variables['attributes']['class'][] = 'caption';
  }
  elseif ($field_name == 'field_byline') {
    $variables['attributes']['class'][] = 'byline';
  }
}

/**
 * Internal function for processing article-style text fields.
 *
 * @param string $field_name
 *   The field currently being preprocessed.
 * @param array $variables
 *   Variables to preprocess.
 */
function _mungo_preprocess_text_field($field_name, &$variables) {
  $variables['attributes']['class'][] = 'article-text';

  if (in_array($field_name, ['field_subtitle', 'field_event_teaser'])) {
    $variables['attributes']['class'][] = 'subtitle';
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess paragraphs.
 */
function mungo_preprocess_paragraph(&$variables) {
  if (empty($variables['paragraph']->getType())) {
    return;
  }

  switch ($variables['paragraph']->getType()) {
    case 'factbox':
      // Add a clean class to factboxes.
      $variables['attributes']['class'][] = 'factbox';
      break;

    case 'video':
      // Add a clean class to videos.
      $variables['attributes']['class'][] = 'media';
      break;

    case 'gallery':
      // Add a clean class to videos.
      $variables['attributes']['class'][] = 'gallery';
      break;

    case 'content_link':
      // Add a clean class to videos.
      _mungo_preprocess_paragraph_content_link($variables);
      break;

    case '1col_deck':
    case '2col_deck':
    case '3col_deck':
    case '4col_deck':
      _mungo_preprocess_deck_paragraph($variables['paragraph']->getType(), $variables);
      break;
  }
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->hasField('field_deck_color') && !empty($paragraph->field_deck_color->value)) {
    $variables['attributes']['class'][] = 'paragraphs--deck-color--' . $paragraph->field_deck_color->value;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function mungo_preprocess_menu(&$variables) {

  if ($variables['menu_name'] == 'footer-social') {
    foreach ($variables['items'] as $key => $item) {
      switch (strtolower($item['title'])) {
        case 'facebook':
        case 'twitter':
        case 'instagram':
        case 'youtube':
          $item['title'] = _mungo_replace_title_with_svg($item['title']);

          $variables['items'][$key] = $item;
          break;
      }
    }
  }
}

/**
 * Get file content based on part of title.
 */
function _mungo_replace_title_with_svg($title) {
  $file_path = drupal_get_path('theme', 'mungo') . '/assets/images/Ikoner_DDS_DK_ikon_' . $title . '.svg';
  if (!file_exists($file_path)) {
    return FALSE;
  }
  if ($file = file_get_contents($file_path)) {
    return '<div class="spejder-icon-wrapper">' . $file . '</div>';
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocessing of variables for various content-types.
 */
function mungo_preprocess_node(&$variables) {
  if (!isset($variables['node'])) {
    return;
  }

  /** @var Node $node */
  $node = $variables['node'];

  switch ($node->getType()) {
    case 'article':
      _mungo_preprocess_node_article($node, $variables);
      break;

    case 'event':
      _mungo_preprocess_event($node, $variables);
      break;

    case 'section_page':
      _mungo_preprocess_section_page($node, $variables);
      break;
  }
}

/**
 * Prepare variables for event-nodes.
 */
function _mungo_preprocess_event(Node $node, &$variables) {
  // If the event is an all day event.
  if (!empty($node->get('field_event_is_all_day')->value) && $node->get('field_event_is_all_day')->value) {
    // Set the format that will be used.
    $format = 'D, m/d/Y';

    // Get timestamps.
    $start_date_timestamp = strtotime($node->get('field_event_start')->value);
    $end_date_timestamp = strtotime($node->get('field_event_end')->value);

    // Convert dates to format, that doesn't show time.
    $start_date_formatted = format_date($start_date_timestamp, 'custom', $format);
    $end_date_formatted = format_date($end_date_timestamp, 'custom', $format);

    // Change the markup/text that will be displayed.
    $variables['content']['field_event_start'][0]['#text'] = $start_date_formatted;
    $variables['content']['field_event_end'][0]['#text'] = $end_date_formatted;
  }
}

/**
 * Prepare variables for section_page-nodes.
 *
 * - Detect whether the node is in a grouping-menu and render it.
 */
function _mungo_preprocess_section_page(Node $node, &$variables) {
  $menu_tree = \Drupal::menuTree();
  $menu_name = 'content-grouping';

  // Load a menu for the current route. We're only interested if the node
  // is on the second level, and we only want to see that level.
  // That is, we want to load the menu-entry for the current node and its
  // siblings.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $parameters->setMinDepth(2);
  $parameters->setMaxDepth(2);
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree making sure it is sorted and only contains entries
  // we're allowed to see.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Render the tree and put it into a variable for output.
  $menu = $menu_tree->build($tree);
  $variables['grouping_menu'] = array(
    '#markup' => \Drupal::service('renderer')->render($menu),
  );
}

/**
 * Prepare variables for article-nodes.
 */
function _mungo_preprocess_node_article(Node $node, &$variables) {
  // Add author presentation.
  if (!empty($node->field_content_author->entity)) {
    $presentation = _mungo_preprocess_author_presentation($node->field_content_author->entity);
    if (!empty($presentation)) {
      $variables['author_presentation'] = $presentation;
    }
  }
}

/**
 * Render variables needed for presentation of a person as a author.
 *
 * @param Term $person
 *   A Person term.
 *
 * @return array
 *   The variables that could be extracted.
 */
function _mungo_preprocess_author_presentation(Term $person) {
  if (!($person instanceof Term)
    || $person->getVocabularyId() !== 'person'
  ) {
    // Bail out if we don't have the expected author.
    \Drupal::logger('mungo')->error('Expected person term');
    return [];
  }

  // Get the image off of the person.
  if (!empty($person->field_person_image->entity->field_image->entity)) {
    /** @var \Drupal\file\Entity\File $person_image */
    $person_image = $person->field_person_image->entity->field_image->entity;

    // Style the author image.
    $image_style_vars = array(
      'style_name' => 'author_image',
      'uri' => $person_image->getFileUri(),
    );

    // The image.factory service will check if our image is valid.
    /** @var \Drupal\Core\Image\Image $image */
    $image = \Drupal::service('image.factory')->get($person_image->getFileUri());
    if ($image->isValid()) {
      $image_style_vars['width'] = $image->getWidth();
      $image_style_vars['height'] = $image->getHeight();
    }
    else {
      $image_style_vars['width'] = $image_style_vars['height'] = NULL;
    }

    // Setup render-array for the author image.
    $return['image'] = [
      '#theme' => 'image_style',
      '#width' => $image_style_vars['width'],
      '#height' => $image_style_vars['height'],
      '#style_name' => $image_style_vars['style_name'],
      '#uri' => $image_style_vars['uri'],
    ];
  }

  // Extract the value to use as when presenting the author.
  $return['name'] = $person->field_presentation_name->value;

  return $return;
}

/**
 * Preprocessing of content link paragraph types.
 */
function _mungo_preprocess_paragraph_content_link(&$variables) {

  // Prepare the variables we'll use to extract the data we need.
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  /** @var LinkItem $link */
  $link = $paragraph->get('field_content_link')->first();
  $lead = empty($paragraph->get('field_content_link_lead')->first()) ? NULL : $paragraph->get('field_content_link_lead')->first()->value;
  $show_thumbnail = (boolean) $variables['paragraph']->get('field_show_thumbnail')->first()->value;

  // Setup the variables we'll try to prepare for the template.
  $thumbnail = NULL;
  // Default to using link title if available, might be overriden for internal
  // links.
  $title = empty($link->get('title')) ? '' : $link->get('title')->getValue();;

  // Handle internal links.
  if (!$link->isExternal()) {
    $uri = $link->get('uri');
    $uri_value = $uri->getValue();

    $link_title = empty($link->get('title')) ? '' : $link->get('title')->getValue();

    if ($show_thumbnail || !empty($link_title)) {
      // Load the node if we need it.
      if (preg_match('#^entity:node/(?P<nid>\d+)$#', $uri_value, $matches)) {
        $node = Node::load($matches['nid']);
      }

      if (empty($link_title)) {
        $title = $node->getTitle();
      }
      else {
        $title = $link_title;
      }

      if (preg_match('#^entity:node/(?P<nid>\d+)$#', $uri_value, $matches)) {
        $node = Node::load($matches['nid']);
        if ($node->hasField('field_main_media')) {

          /** @var \Drupal\media_entity\Entity\Media $main_media */
          $main_media = $node->get('field_main_media')->first()->entity;

          /** @var File $image_file */
          $image_file = $main_media->get('field_image')->entity;

          $thumbnail = _mungo_render_image_with_style($image_file, 'thumbnail_4_3');

        }
      }
    }
  }

  // Blank out any existing content.
  $variables['content'] = [];

  // Add our RAs.
  $variables['content']['lead'] = $lead;
  $variables['content']['thumbnail'] = $thumbnail;
  $variables['content']['url'] = $link->getUrl()->toString();
  $variables['content']['title'] = $title;
}

/**
 * Given an image file, produce a image_style render array for a style.
 */
function _mungo_render_image_with_style(File $image_file, string $style) : array {
  // Style the author image.
  $image_style_vars = array(
    'style_name' => $style,
    'uri' => $image_file->getFileUri(),
  );

  // Load the image from the file so that we can know its size.
  /** @var Image $image */
  $image = \Drupal::service('image.factory')->get($image_file->getFileUri());
  if ($image->isValid()) {
    $image_style_vars['width'] = $image->getWidth();
    $image_style_vars['height'] = $image->getHeight();
  }
  else {
    $image_style_vars['width'] = $image_style_vars['height'] = NULL;
  }

  // Setup render-array for the author image.
  return [
    '#theme' => 'image_style',
    '#width' => $image_style_vars['width'],
    '#height' => $image_style_vars['height'],
    '#style_name' => $image_style_vars['style_name'],
    '#uri' => $image_style_vars['uri'],
  ];
}

/**
 * Implements template_preprocess_views_view().
 */
function mungo_preprocess_views_view(&$variables) {
  // Get view object.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Views assumes that the default core block-layout will render its titel
  // but we've disabled it to have more control over when the title is
  // rendered, so we have to render the views title manually.
  if ($view->current_display === 'events_overview') {
    $variables['title'] = $view->getTitle();
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * We implement this alter to provide additional targeting options for the form
 * element. This is done because datetimes are rendered in another fashion than
 * other form elements and we would like to remove some of the styling inside
 * the datetime-form.html.twig template.
 */
function mungo_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'paragraph':
      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = $variables['elements']['#paragraph'];
      if (in_array($paragraph->getType(),
        ['1col_deck', '2col_deck', '3col_deck', '4col_deck'])) {
        $suggestions[] = $hook . '__deck';
        $suggestions[] = $hook . '__deck__' . $paragraph->getType();
      }
      break;

    case 'field':
      $field_name = $variables['element']['#field_name'];

      if (in_array($field_name, ['field_2col_deck_col1', 'field_2col_deck_col2'])) {
        $suggestions[] = $hook . '__' . $variables['element']['#entity_type'] . '__deckcolumn';
      }
      break;
  }
}

/**
 * Translate between the two-col paragraphs int sizes and string-sizes.
 *
 * @param int $value
 *   The option value.
 *
 * @return null|string
 *   66_33 or 33_66 depending on the option value.
 */
function _mungo_2col_size_option_to_text(int $value) {
  switch ($value) {
    case 1:
      return '66_33';

    case 2:
      return '33_66';
  }

  return NULL;
}

/**
 * Preprocess the deck paragraph types.
 */
function _mungo_preprocess_deck_paragraph($type, &$variables) {
  $variables['cols_attributes'] = new Attribute();

  // Detect each column field and move it into a seperat cols.<name>
  // variable.
  // The name is expected to look like this: field_4col_deck_col_4 for the
  // rightmost column in a 4col deck.
  foreach ($variables['content'] as $key => $content) {
    if (preg_match('#^field_\d+col_deck_col\d+$#', $key)) {
      $variables['cols'][$key] = $content;
      unset($variables['content'][$key]);
    }
  }

  if ($type === '1col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-md-12';
    }
  }
  elseif ($type === '2col_deck') {
    // The 2col deck column-sizes are not distributed evenly, so we have to
    // determine which column should be the largest and then set the class
    // based on that.
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];
    if ($paragraph->hasField('field_2col_column_size') && isset($paragraph->get('field_2col_column_size')->value)) {
      switch (_mungo_2col_size_option_to_text($paragraph->get('field_2col_column_size')->value)) {
        case '66_33':
          $variables['cols']['field_2col_deck_col1']['#attributes']['class'][] = 'col-md-8';
          $variables['cols']['field_2col_deck_col2']['#attributes']['class'][] = 'col-md-4';
          break;

        case '33_66':
          $variables['cols']['field_2col_deck_col1']['#attributes']['class'][] = 'col-md-4';
          $variables['cols']['field_2col_deck_col2']['#attributes']['class'][] = 'col-md-8';
          break;
      }
    }
  }
  elseif ($type === '3col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-md-4';
    }
  }
  elseif ($type === '4col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-md-3';
    }
  }
}
