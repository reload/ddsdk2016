<?php

/**
 * @file
 * Main theme-file for the Mungo theme.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Site\Settings;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\dds_activity\ActivityFetcher;
use Drupal\file\FileInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\TermInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\dds_layout\Form\MungoInspirationPrerender;

/**
 * Implements hook_preprocess_HOOK().
 */
function mungo_preprocess_html(&$variables) {
  // Make featureflags available.
  $variables['feature_flags'] = \Drupal::config('feature_flags')->get();
  $variables['enable_linkedin_script'] = \Drupal::config('ddsdk')->get('enable_linkedin_script');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mungo_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  if (in_array($variables['field_name'], ['field_caption', 'field_byline'])) {
    // Handle various main-media fields.
    _mungo_preprocess_field_main_media($field_name, $variables);
  }
  elseif (in_array($field_name,
    [
      'field_event_teaser',
      'field_subtitle',
      'field_formatted_text',
      'field_instructions',
      'field_materials',
      'field_questions',
    ]
  )) {
    _mungo_preprocess_text_field($field_name, $variables);
  }
  elseif (in_array($field_name, ['field_factbox_text'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'factbox__body';
  }
  elseif (in_array($field_name, ['field_video'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'video';
  }
  elseif (in_array($field_name, ['field_video_caption'])) {
    // Clean the classes on factboxes.
    $variables['attributes']['class'][] = 'caption';
  }
  elseif (in_array($field_name, ['field_shortcuts'])) {

    if (!empty($variables['items'])) {

      $links = $variables['element']['#items']->getValue();

      foreach ($variables['items'] as $delta => $value) {
        $variables['items'][$delta]['content']['#options']['attributes']['class'][] = 'shortcuts__link';
        $url = $variables['items'][$delta]['content']['#url'];
        $link = $links[$delta];

        if (!$url->isExternal() && empty($link['title'])) {
          $uri_value = $url->getInternalPath();

          if (preg_match('#^node/(?P<nid>\d+)$#', $uri_value, $matches)) {
            $node = Node::load($matches['nid']);
            $variables['items'][$delta]['content']['#title'] = $title = $node->getTitle();
          }
        }
      }
    }
  }
  elseif (in_array($field_name, ['field_2col_deck_col1', 'field_2col_deck_col2'])) {
    /** @var Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];
    $sizes = _mungo_2col_size_option_to_text($paragraph->get('field_2col_column_size')->value);
    // Detect the field that is being rendered as the large part of the
    // two-column deck. It's items should take up 50% of the column aka
    // 6 cols.
    $variables['item_col_classes'] = [];
    if ($sizes === '66_33' && $field_name === 'field_2col_deck_col1') {
      $variables['item_col_classes'][] = 'col-xs-6';
    }
    elseif ($sizes === '33_66' && $field_name === 'field_2col_deck_col2') {
      $variables['item_col_classes'][] = 'col-xs-6';
    }
  }
  if ($field_name === 'field_section') {
    $prevkey = NULL;
    $herobannerfound = FALSE;

    foreach ($variables['items'] as $key => &$item) {
      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = isset($item['content']['#paragraph']) ? $item['content']['#paragraph'] : NULL;

      // If the a 4col_deck paragraph is right after a herobanner. Set negative
      // margin.
      if (!empty($paragraph) && $herobannerfound === TRUE && $paragraph->getType() === '4col_deck') {
        if (!empty($paragraph->field_4col_deck_col1)) {
          $entities = $paragraph->field_4col_deck_col1->referencedEntities();
          $situation_link = reset($entities);
          if ($situation_link->getType() == 'situation_links') {
            /** @var Drupal\Core\Template\Attribute $attributes */
            $attributes = $variables['items'][$key]['attributes'];
            $attributes->addClass('paragraph-set-negative-margin');
            /** @var Drupal\Core\Template\Attribute $attributes */
            $prevel_attributes = $variables['items'][$prevkey]['attributes'];
            $prevel_attributes->addClass('content-set-negative-margin');
          }
        }
      }
      $herobannerfound = $paragraph->getType() == 'hero_banner' ? TRUE : FALSE;
      $prevkey = $key;
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Lookup cookie settings for providers.
 */
function mungo_preprocess_video_embed_iframe(&$variables) {
  $cookie_consent_categories = [
    'youtube' => 'marketing',
  ];

  $url = $variables['url'];

  if (preg_match('/youtube/', $url)) {
    $provider = 'youtube';
  }

  if (!empty($provider)) {
    $variables['cookie_consent_category'] = $cookie_consent_categories[$provider];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mungo_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['search_text'] = $form['keys'];
  $form['#action'] = '/soeg';
  unset($form['keys']);

  $form['actions']['search_submit'] = array(
    '#type' => 'html_tag',
    '#tag' => 'button',
    '#value' => '<span class="glyphicon glyphicon-search"></span>',
  );
}

/**
 * Implements hook_form_alter().
 */
function mungo_form_alter(&$form, &$form_state, $form_id) {
  // Set identical place-holder text in a number of search form fields.
  $search_placeholder_text = t('Search for content ...', [], ['context' => 'content search']);

  // The search-page itself (/soeg).
  if (!empty($form['#id']) && $form['#id'] === 'views-exposed-form-search-content-search') {
    $form['search_text']['#placeholder'] = $search_placeholder_text;
  }

  // The search-popup in the menu.
  if ($form_id === 'search_block_form') {
    $form['keys']['#placeholder'] = $search_placeholder_text;
  }

  if (preg_match('/^forward_form_node_\d+$/', $form_id)) {
    $form['#attributes']['class'][] = 'forward-form';
  }
}

/**
 * Internal function for processing main media fields.
 *
 * @param string $field_name
 *   The field currently being preprocessed.
 * @param array $variables
 *   Variables to preprocess.
 */
function _mungo_preprocess_field_main_media($field_name, array &$variables) {
  if ($field_name == 'field_caption') {
    $variables['attributes']['class'][] = 'caption';
  }
  elseif ($field_name == 'field_byline') {
    $variables['attributes']['class'][] = 'byline';
  }
}

/**
 * Internal function for processing article-style text fields.
 *
 * @param string $field_name
 *   The field currently being preprocessed.
 * @param array $variables
 *   Variables to preprocess.
 */
function _mungo_preprocess_text_field($field_name, array &$variables) {
  $variables['attributes']['class'][] = 'article-text';

  if (in_array($field_name, ['field_subtitle', 'field_event_teaser'])) {
    $variables['attributes']['class'][] = 'subtitle';
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess paragraphs.
 */
function mungo_preprocess_paragraph(&$variables) {
  if (empty($variables['paragraph']->getType())) {
    return;
  }
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->getType()) {
    case 'factbox':
      // Add a clean class to factboxes.
      $variables['attributes']['class'][] = 'factbox';
      break;

    case 'video':
      // Add a clean class to videos.
      $variables['attributes']['class'][] = 'media';
      break;

    case 'image':
      // Add a clean class to videos.
      $variables['attributes']['class'][] = 'fluid-media';
      break;

    case 'gallery':
      // Add a clean class to videos.
      $variables['attributes']['class'][] = 'dds-gallery';
      break;

    case 'key_figures':

      if ($paragraph->hasField('field_key_figures_deck_color') && !(empty($paragraph->field_key_figures_deck_color->getValue()))) {
        $color = $paragraph->field_key_figures_deck_color->getValue();
        if (!empty($color[0])) {
          $variables['color'] = $color[0]['value'];
        }
      }
      if ($paragraph->hasField('field_key_figures_link_1') && !(empty($paragraph->field_key_figures_link_1->getValue()))) {
        $link_1 = $paragraph->field_key_figures_link_1->getValue();
        if (!empty($link_1[0])) {
          $variables['content']['link_1'] = Url::fromUri($link_1[0]['uri']);
        }
      }
      if ($paragraph->hasField('field_key_figures_link_2') && !(empty($paragraph->field_key_figures_link_2->getValue()))) {
        $link_2 = $paragraph->field_key_figures_link_2->getValue();
        if (!empty($link_2[0])) {
          $variables['content']['link_2'] = Url::fromUri($link_2[0]['uri']);
        }
      }
      if ($paragraph->hasField('field_key_figures_link_3') && !(empty($paragraph->field_key_figures_link_3->getValue()))) {
        $link_3 = $paragraph->field_key_figures_link_3->getValue();
        if (!empty($link_3[0])) {
          $variables['content']['link_3'] = Url::fromUri($link_3[0]['uri']);
        }
      }
      break;

    case 'content_link':
      // Add a clean class to videos.
      _mungo_preprocess_paragraph_content_link($variables);
      break;

    case 'inspiration_deck':
      foreach (Element::children($variables['content']['field_inspiration_deck_items']) as $key) {
        $variables['content']['field_inspiration_deck_items'][$key]['#pre_render'][] = [
          MungoInspirationPrerender::class,
          'deckPrerender',
        ];

        // We're going to affect the rendered result, so make sure our
        // pre-render becomes a part of the cache key.
        $variables['content']['field_inspiration_deck_items'][$key]['#cache']['keys'][] = 'mungo_inspirational_prerender';
      }

      // Set variable for the teaser-texts background and foreground color.
      // Teaser_text_background_color contains the color of the background
      // and we switch on it to get the foreground-color.
      if (isset($variables['content']['field_insp_teaser_color'][0]['#markup'])) {
        $variables['teaser_text_background_color'] = $variables['content']['field_insp_teaser_color'][0]['#markup'];

        if (in_array($variables['teaser_text_background_color'], ['#ea636f', '#003366'])) {
          $variables['teaser_text_color'] = 'white';
        }
        else {
          // Default is black text.
          $variables['teaser_text_color'] = 'black';
        }
      }
      break;

    case 'situation_links':
      // Prepare properties for paragraph type situation links.
      if ($paragraph->hasField('field_situation_main_link') && !(empty($paragraph->field_situation_main_link->getValue()))) {
        $link = $paragraph->field_situation_main_link->getValue();
        if (!empty($link[0])) {
          $variables['content']['main_link']['text'] = $link[0]['title'];
          $variables['content']['main_link']['link'] = Url::fromUri($link[0]['uri']);
        }
      }
      if ($paragraph->hasField('field_situation_color') && !empty($paragraph->field_situation_color->value)) {
        $variables['attributes']['class'][] = 'situation-links-color-' . $paragraph->field_situation_color->value;
      }
      if ($paragraph->hasField('field_icon') && !empty($paragraph->field_icon->value)) {
        $variables['content']['icon'] = _mungo_replace_title_with_svg($paragraph->field_icon->value);
      }
      break;

    case '1col_deck':
    case '2col_deck':
    case '3col_deck':
    case '4col_deck':
      _mungo_preprocess_deck_paragraph($variables['paragraph']->getType(), $variables);
      break;
  }
  if ($paragraph->hasField('field_deck_color') && !empty($paragraph->field_deck_color->value)) {
    $variables['attributes']['class'][] = 'paragraphs--deck-color--' . $paragraph->field_deck_color->value;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function mungo_preprocess_menu(&$variables) {

  if ($variables['menu_name'] == 'footer-social') {
    foreach ($variables['items'] as $key => $item) {
      switch (strtolower($item['title'])) {
        case 'facebook':
        case 'twitter':
        case 'instagram':
        case 'youtube':
          $item['title'] = _mungo_replace_title_with_svg($item['title']);

          $variables['items'][$key] = $item;
          break;
      }
    }
  }
}

/**
 * Get file content based on part of title.
 */
function _mungo_replace_title_with_svg($title) {
  $file_path = drupal_get_path('theme', 'mungo') . '/assets/images/Ikoner_DDS_DK_ikon_' . $title . '.svg';
  if (!file_exists($file_path)) {
    return FALSE;
  }
  if ($file = file_get_contents($file_path)) {
    return '<div class="spejder-icon-wrapper">' . $file . '</div>';
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocessing of variables for various content-types.
 */
function mungo_preprocess_node(&$variables) {
  if (!isset($variables['node'])) {
    return;
  }

  /** @var Drupal\node\entity\Node $node */
  $node = $variables['node'];

  // Add absolute url to the node.
  $variables['absolute_url'] = Url::fromUri('internal:' . $variables['url'], array('absolute' => TRUE))->toString();

  switch ($node->getType()) {
    case 'article':
      _mungo_preprocess_node_article($node, $variables);
      break;

    case 'event':
      _mungo_preprocess_event($node, $variables);
      break;

    case 'section_page':
      _mungo_preprocess_section_page($node, $variables);
      break;

    case 'badge':
      _mungo_preprocess_node_badge($node, $variables);
      break;

    case 'download':
      _mungo_preprocess_node_download($node, $variables);
      break;
  }

  $node_url = Url::fromUri('internal:' . $variables['url'], array('absolute' => TRUE));

  // Generate an uri for the forward module.
  $entity_id = $node->id();
  $entity_type = $node->getEntityTypeId();
  $forward_uri = "internal:/forward/{$entity_type}/{$entity_id}";

  $variables['social_links'] = array(
    '#theme' => 'social_links',
    '#attributes' => array(
      'class' => array('share--icons'),
    ),
    '#facebook_link' => Url::fromUri('https://www.facebook.com/sharer/sharer.php', array('query' => array('u' => $node_url->toString()))),
    '#twitter_link' => Url::fromUri('https://twitter.com/home', array('query' => array('status' => $node_url->toString()))),
    '#forward_link' => Url::fromUri($forward_uri),
  );

  // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  foreach ($node->get('field_content_target_group')->getValue() as $item) {
    // The term id that the editors can add to content to indicate that the
    // content is from spejder.dk. We're checking on the id because the name
    // could change.
    $spejder_dk_tid = 826;

    /** @var Drupal\taxonomy\TermInterface $target_group */
    $target_group = Term::load($item['target_id']);

    if (intval($target_group->id()) != $spejder_dk_tid) {
      continue;
    }

    $node_has_spejderdk_target_group = intval($target_group->id()) == $spejder_dk_tid;
    $variables['has_spejderdk_target_group'] = $node_has_spejderdk_target_group;
    $variables['spejderdk_target_group_term_name'] = $target_group->getName();
  }
}

/**
 * Prepare variables for download node type.
 */
function _mungo_preprocess_node_download(Node $node, &$variables) {
  if ($node->get('field_file')->isEmpty()) {
    return;
  }

  if (!$node->get('field_file')->first()->entity instanceof FileInterface) {
    return;
  }

  // File url.
  $file = $node->get('field_file')->first()->entity;
  $file_uri = $file->getFileUri();
  $variables['file_url'] = Url::fromUri(file_create_url($file_uri));

  // Create wrapper to avoid reflow and/or double images.
  $variables['layout_attributes'] = new Attribute();

  // Create forward url for mail.
  $variables['mail_url'] = '/forward/node/' . $node->get('nid')->value;

  // Add destination parameter. The return value of `getPath()` is not defined
  // and `getAliasByPath()` can throw an \InvalidArgumentException. We wrap it
  // all on in a try/catch block so we can proceed if an error occurs while
  // doing alias lookup.
  try {
    $current_path = \Drupal::service('path.current')->getPath();
    $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    if (is_string($current_alias)) {
      $variables['mail_url'] .= '?destination=' . $current_alias;
    }
  }
  catch (\Exception $e) {
    // Noop. If destination parameter lookup failed just proceed without adding
    // one.
    watchdog_exception('mungo', $e);
  }

  // Get the inline svg icon.
  $variables['svg_icon'] = _mungo_replace_title_with_svg('download');
}

/**
 * Prepare variables for badge node type.
 */
function _mungo_preprocess_node_badge(Node $node, &$variables) {
  // Setup the top_image theme hook invocation.
  $top_image = [
    '#theme' => 'dds_top_image',
    '#image' => empty($variables['content']['field_badge_cover_image']) ? NULL : $variables['content']['field_badge_cover_image'],
  ];

  $variables['top_image'] = $top_image;

  // Add a level menu to badges.
  if ($node->field_badge_type->value === DDS_BADGE_TYPE_PROGRESSION
    && !empty($node->field_badge_progression)
  ) {
    // Pick out the progression term the node is associated with.
    $progression_reference = $node->field_badge_progression->referencedEntities();
    if (is_array($progression_reference) && !empty($progression_reference)) {
      /** @var Drupal\taxonomy\Entity\Term $term */
      $term = reset($progression_reference);

      // Find all nodes that is in the progression.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'badge')
        ->condition('field_badge_progression.entity.tid', $term->tid->value);
      $nids = $query->execute();

      if (!empty($nids)) {
        $nodes = Node::loadMultiple(array_values($nids));
        if ($nodes && is_array($nodes)) {
          dds_badge_sort_nodes_by_level($nodes);
        }

        $links = [];
        foreach ($nodes as $linked_node) {
          /** @var Drupal\node\Entity\Node $linked_node */
          /** @var OptionsProviderInterface $field_item */
          $field_item = $linked_node->field_badge_level->get(0);
          $option = $field_item->getPossibleOptions()[$field_item->value];

          $link_option = [];
          if ($linked_node->id() === $node->id()) {
            $link_option = [
              'attributes' => [
                'class' => ['large-button-menu--button__active'],
              ],
            ];
          }
          /** @var \Drupal\Core\Url $url */
          $url = $linked_node->toUrl();
          $link_option += $url->getOptions();
          $url->setOptions($link_option);
          // @codingStandardsIgnoreStart
          // We have to translate a variable.
          $link_label = new TranslatableMarkup($option, [], ['context' => 'badge level']);
          // @codingStandardsIgnoreEnd
          $links[] = new Link($link_label, $url);
        }

        $variables['level_menu'] = $links;
      }
    }
  }
}

/**
 * Prepare variables for event-nodes.
 */
function _mungo_preprocess_event(Node $node, &$variables) {
  // If the event is an all day event.
  if (!empty($node->get('field_event_is_all_day')->value) && $node->get('field_event_is_all_day')->value) {
    // Get timestamps and format them.
    if (!empty($node->get('field_event_start')->date) && !empty($node->get('field_event_end')->date)) {
      $start_date = $node->get('field_event_start')->date;
      $end_date = $node->get('field_event_end')->date;

      if ($start_date instanceof DrupalDateTime && $end_date instanceof DrupalDateTime) {
        // Convert dates to format, that doesn't show time.
        $start_date_formatted = \Drupal::service('date.formatter')->format($start_date->getTimeStamp(), 'event_short_date_no_time');
        $end_date_formatted = \Drupal::service('date.formatter')->format($end_date->getTimeStamp(), 'event_short_date_no_time');

        // Change the markup/text that will be displayed.
        $variables['content']['field_event_start'][0]['#text'] = $start_date_formatted;
        $variables['content']['field_event_end'][0]['#text'] = $end_date_formatted;
      }
    }
  }

  // Test if the fieldgroup "group_date_range is present.
  if (
    $variables['view_mode'] === 'search_index'
    && !empty($node->get('field_event_start')->value)
    && !empty($node->get('field_event_end')->value)
  ) {
    $variables['is_all_day'] = $node->get('field_event_is_all_day')->value;
    $variables['start_date'] = $node->get('field_event_start')->first()->get('date')->getValue()->getTimestamp();
    $variables['end_date'] = $node->get('field_event_end')->first()->get('date')->getValue()->getTimestamp();
  }
}

/**
 * Prepare variables for section_page-nodes.
 *
 * - Detect whether the node is in a grouping-menu and render it.
 */
function _mungo_preprocess_section_page(Node $node, &$variables) {
  $menu_tree = \Drupal::menuTree();
  $menu_name = 'content-grouping';

  // Load a menu for the current route. We're only interested if the node
  // is on the second level, and we only want to see that level.
  // That is, we want to load the menu-entry for the current node and its
  // siblings.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $parameters->setMinDepth(2);
  $parameters->setMaxDepth(2);
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree making sure it is sorted and only contains entries
  // we're allowed to see.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Render the tree and put it into a variable for output.
  $menu = $menu_tree->build($tree);
  $variables['grouping_menu'] = array(
    '#markup' => \Drupal::service('renderer')->render($menu),
  );
}

/**
 * Prepare variables for article-nodes.
 */
function _mungo_preprocess_node_article(Node $node, &$variables) {
  $ddsconfig = \Drupal::config('ddsdk');

  // Show facebook-comments on all articles but simple articles.
  if ($node->field_article_type->value !== 'simple' && !empty($ddsconfig->get('facebook.appid'))) {
    $variables['facebook_comments'] = TRUE;
    $variables['facebook_appid'] = $ddsconfig->get('facebook.appid');
  }
  // Add author presentation.
  if (!empty($node->field_content_author->entity)) {
    $presentation = _mungo_preprocess_author_presentation($node->field_content_author->entity);
    if (!empty($presentation)) {
      $variables['author_presentation'] = $presentation;
    }
  }
}

/**
 * Render variables needed for presentation of a person as a author.
 *
 * @param Drupal\taxonomy\TermInterafce $person
 *   A Person term.
 *
 * @return array
 *   The variables that could be extracted.
 */
function _mungo_preprocess_author_presentation(TermInterface $person) {
  if ($person->bundle() !== 'person') {
    // Bail out if we don't have the expected author.
    \Drupal::logger('mungo')->error('Expected person term');
    return [];
  }

  // Get the image off of the person.
  if (!empty($person->field_person_image->entity->field_image->entity)) {
    /** @var \Drupal\file\Entity\File $person_image */
    $person_image = $person->field_person_image->entity->field_image->entity;

    // Style the author image.
    $image_style_vars = array(
      'style_name' => 'author_image',
      'uri' => $person_image->getFileUri(),
    );

    // The image.factory service will check if our image is valid.
    /** @var \Drupal\Core\Image\Image $image */
    $image = \Drupal::service('image.factory')->get($person_image->getFileUri());
    if ($image->isValid()) {
      $image_style_vars['width'] = $image->getWidth();
      $image_style_vars['height'] = $image->getHeight();
    }
    else {
      $image_style_vars['width'] = $image_style_vars['height'] = NULL;
    }

    // Setup render-array for the author image.
    $return['image'] = [
      '#theme' => 'image_style',
      '#width' => $image_style_vars['width'],
      '#height' => $image_style_vars['height'],
      '#style_name' => $image_style_vars['style_name'],
      '#uri' => $image_style_vars['uri'],
    ];
  }

  // Extract the value to use as when presenting the author.
  $return['name'] = $person->field_presentation_name->value;

  return $return;
}

/**
 * Preprocessing of content link paragraph types.
 */
function _mungo_preprocess_paragraph_content_link(&$variables) {

  // Prepare the variables we'll use to extract the data we need.
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  /** @var Drupal\link\Plugin\Field\FieldType\LinkItem $link */
  $link = $paragraph->get('field_content_link')->first();
  $lead = empty($paragraph->get('field_content_link_lead')->first()) ? NULL : $paragraph->get('field_content_link_lead')->first()->value;
  $show_thumbnail = (boolean) $variables['paragraph']->get('field_show_thumbnail')->first()->value;

  // Setup the variables we'll try to prepare for the template.
  $thumbnail = NULL;
  $alternative_url = NULL;
  $target = NULL;

  // Default to using link title if available, might be overriden for internal
  // links.
  $title = empty($link->get('title')) ? '' : $link->get('title')->getValue();;

  // Handle internal links.
  if (!$link->isExternal()) {
    $uri = $link->get('uri');
    $uri_value = $uri->getValue();

    $link_title = empty($link->get('title')) ? '' : $link->get('title')->getValue();

    if ($show_thumbnail || !empty($link_title)) {
      // Load the node if we need it.
      if (preg_match('#^entity:node/(?P<nid>\d+)$#', $uri_value, $matches)) {
        $node = Node::load($matches['nid']);
      }

      // Abort if we're linked to a node that does not exist.
      if (empty($node)) {
        return;
      }

      // Add cache tag to make sure node cache gets invalidated when linked
      // content gets updated.
      $variables['#cache']['tags'] = $node->getCacheTags();

      if (empty($link_title)) {
        $title = $node->getTitle();
      }
      else {
        $title = $link_title;
      }

      // If this is a node-reference, process it's thumb.
      if (preg_match('#^entity:node/(?P<nid>\d+)$#', $uri_value, $matches)) {
        $node = Node::load($matches['nid']);
        if ($node->hasField('field_main_media')) {
          /** @var \Drupal\media\Entity\Media $main_media */
          $main_media = $node->get('field_main_media')->first()->entity;

          // Get the uri for the thumbnail of either an image or a video.
          $thumbnail_uri = NULL;
          if (!empty($main_media)) {
            if ($main_media->hasField('field_media_video_embed_field')) {
              $thumbnail_uri = dds_metatag_video_thumb_from_main_media($main_media);
            }
            elseif ($main_media->hasField('field_image')) {
              /** @var File $image_file */
              $image_file = $main_media->get('field_image')->entity;

              $thumbnail_uri = $image_file->getFileUri();
            }
          }
          if ($thumbnail_uri !== NULL) {
            $thumbnail = _mungo_render_image_uri_with_style($thumbnail_uri, 'thumbnail_4_3');
          }
        }

        // If the node type is download we want to link to the download file
        // instead of the node itself.
        if ($node->getType() === 'download') {
          $download = [];
          _mungo_preprocess_node_download($node, $download);
          $alternative_url = $download['file_url'];
          $target = '_blank';
        }
      }
    }
  }

  // Blank out any existing content.
  $variables['content'] = [];

  // Add our RAs.
  $variables['content']['lead'] = $lead;
  $variables['content']['thumbnail'] = $thumbnail;
  $variables['content']['url'] = $link->getUrl()->toString();
  $variables['content']['alternative_url'] = $alternative_url;
  $variables['content']['target'] = $target;
  $variables['content']['title'] = $title;
}

/**
 * Given an image file, produce a image_style render array for a style.
 */
function _mungo_render_image_uri_with_style($uri, string $style) : array {

  // Load the image from the file so that we can know its size.
  /** @var \Drupal\Core\Image\Image $image */
  $image = \Drupal::service('image.factory')->get($uri);
  if ($image->isValid()) {
    $image_dimensions['width'] = $image->getWidth();
    $image_dimensions['height'] = $image->getHeight();
  }
  else {
    $image_dimensions['width'] = $image_dimensions['height'] = NULL;
  }

  // Setup render-array for the image.
  return [
    '#theme' => 'image_style',
    '#width' => $image_dimensions['width'],
    '#height' => $image_dimensions['height'],
    '#style_name' => $style,
    '#uri' => $uri,
  ];
}

/**
 * Given an image file, produce a responsive_image render array for a style.
 */
function _mungo_render_image_uri_with_responsive_style(string $uri, string $style) {
  // Load the image from the file so that we can know its size.
  /** @var \Drupal\Core\Image\Image $image */
  $image = \Drupal::service('image.factory')->get($uri);
  if ($image->isValid()) {
    $image_style_vars['width'] = $image->getWidth();
    $image_style_vars['height'] = $image->getHeight();
  }
  else {
    // Required for the responsive image-style.
    return NULL;
  }

  // Setup render-array for the image.
  return [
    '#theme' => 'responsive_image',
    '#width' => $image_style_vars['width'],
    '#height' => $image_style_vars['height'],
    '#responsive_image_style_id' => $style,
    '#uri' => $uri,
  ];
}

/**
 * Implements template_preprocess_views_view().
 */
function mungo_preprocess_views_view(&$variables) {
  // Get view object.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];


  // TODO: Move this list of displays to a centralized place.
  // Same goes for the exposed filter definition in :facets_views_block_preprocess_views_view().
  if (in_array($view->current_display, [
      'events_overview',
      'activities_overview',
  ])) {
    // Views assumes that the default core block-layout will render its title
    // but we've disabled it to have more control over when the title is
    // rendered, so we have to render the views title manually.
    $variables['title'] = $view->getTitle();

    // If we have active, non-default filters, we can tell frotend to not
    // hide the filters by dropdown.
    $request_params = \Drupal::request()->query->all();
    if (!empty($request_params['f']) || isset($request_params['event_before'])) {
      $variables['has_active_facets'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_links().
 */
function mungo_preprocess_links(&$variables) {
  if ($variables['theme_hook_original'] == 'links__node') {
    // Remove links to forward. This link is set directly in theme social_links.
    unset($variables['links']['forward']);
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * We implement this alter to provide additional targeting options for the form
 * element. This is done because datetimes are rendered in another fashion than
 * other form elements and we would like to remove some of the styling inside
 * the datetime-form.html.twig template.
 */
function mungo_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'paragraph':

      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = $variables['elements']['#paragraph'];

      if (in_array($paragraph->getType(),
        ['1col_deck', '2col_deck', '3col_deck', '4col_deck', 'list_deck'])) {
        $suggestions[] = $hook . '__deck';
        $suggestions[] = $hook . '__deck__' . $paragraph->getType();
      }

      // Suggestions for paragraphs that are referenced.
      $reference_types = [
        'content_article_reference',
        'content_badge_reference',
        'content_activity_reference',
        'content_event_reference',
      ];

      if (in_array($paragraph->getType(), $reference_types)) {
        $suggestions[] = $hook . '__content_reference';
        $suggestions[] = $hook . '__content_reference__' . $paragraph->getType();
      }
      break;

    case 'field':
      $field_name = $variables['element']['#field_name'];
      $bundle = isset($variables['element']['#bundle']) ? $variables['element']['#bundle'] : NULL;
      $object = isset($variables['element']['#object']) ? $variables['element']['#object'] : NULL;

      if (preg_match('#^field_\dcol_deck_col\d$#', $field_name)) {
        $suggestions[] = $hook . '__' . $variables['element']['#entity_type'] . '__deckcolumn';
      }
      // Since two columns require extra wrapping of items this new template is
      // used. This could and should be refactored but it works right now.
      if ($bundle === "2col_deck" && $object instanceof EntityInterface && $object->hasField('field_2col_column_size') && isset($object->field_2col_column_size->value)) {
        $size = _mungo_2col_size_option_to_text($object->field_2col_column_size->value);

        if ($size === "66_33" && $field_name === 'field_2col_deck_col1') {
          $suggestions[] = $hook . '__' . $variables['element']['#entity_type'] . '__deckcolumn__two_cols';
        }

        // '1/3 : 2/3'.
        if ($size === "33_66" && $field_name === 'field_2col_deck_col2') {
          $suggestions[] = $hook . '__' . $variables['element']['#entity_type'] . '__deckcolumn__two_cols';
        }
      }
      // Provide full view_mode for title and field_subtitle fields
      // to differentiate on when to apply dymo-text.
      // Could be applied to even more fields, but not necessary for now.
      $target_fields = array('title', 'field_subtitle');
      if (in_array($variables['element']['#field_name'], $target_fields) && $variables['element']['#view_mode'] == 'full') {
        $entity_type = $variables['element']['#entity_type'];
        $bundle = $variables['element']['#bundle'];
        $suggestions[] = "{$hook}__{$entity_type}__{$field_name}__{$bundle}__full";
      }
      break;

    case 'taxonomy_term':
      // Add view-modes to taxonomies.
      if (!empty($variables['elements']['#view_mode'])) {
        $view_mode = $variables['elements']['#view_mode'];
        foreach ($suggestions as $id => $suggestion) {
          $suggestions[] = $suggestion . '__' . $view_mode;
        }
        $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
      }
      break;

    case 'bef_links':

      // Attempt to find a usable machine-like name for the view via its
      // path, and the name of the field being filtered on and add both as
      // suggestions.
      $base = $hook;
      if (isset($variables['element']['#bef_path'])) {
        /** @var Drupal\Core\Url $url */
        $url = $variables['element']['#bef_path'];

        // We assume the bef is attached to a view, in which case we can
        // get a pretty good id out of the the route name.
        // eg: view.badges.overview
        // For a view named badges with a display named overview.
        $route_name = $url->getRouteName();
        if (!empty($route_name)) {
          $route_path = str_replace('.', '_', $route_name);
          $base = $hook . '__' . $route_path;
          $suggestions[] = $base;
        }
      }

      if (isset($variables['element']['#attributes']['name'])) {
        $filter_name = $variables['element']['#attributes']['name'];
        $suggestions[] = $base . '__' . $filter_name;
      }

      break;

    case 'container':
      // Views will always wrap results in a container element, we add a
      // couple of suggetions to make it easier to target it.
      if (!empty($variables['element']['#type'])) {
        // If the child-element has a type, add it as a suggestion.
        $suggestions[] = $hook . '__' . $variables['element']['#type'];
        if (!empty($variables['element']['#type'] === 'view')) {
          // If the child is a view, add the view name and display-id.
          $suggestions[] = $hook . '__' . $variables['element']['#type'] . '__' . $variables['element']['#name'];
          $suggestions[] = $hook . '__' . $variables['element']['#type'] . '__' . $variables['element']['#name'] . '__' . $variables['element']['#display_id'];
        }
      }

      break;
  }
}

/**
 * Translate between the two-col paragraphs int sizes and string-sizes.
 *
 * @param int $value
 *   The option value.
 *
 * @return null|string
 *   66_33 or 33_66 depending on the option value.
 */
function _mungo_2col_size_option_to_text(int $value) {
  switch ($value) {
    case 1:
      return '66_33';

    case 2:
      return '33_66';
  }

  return NULL;
}

/**
 * Preprocess the deck paragraph types.
 */
function _mungo_preprocess_deck_paragraph($type, &$variables) {
  $variables['cols_attributes'] = new Attribute();

  // Detect each column field and move it into a seperat cols.<name>
  // variable.
  // The name is expected to look like this: field_4col_deck_col_4 for the
  // rightmost column in a 4col deck.
  foreach ($variables['content'] as $key => $content) {
    if (preg_match('#^field_\d+col_deck_col\d+$#', $key)) {
      $variables['cols'][$key] = $content;
      unset($variables['content'][$key]);
    }
  }

  if ($type === '1col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-xs-12';
    }
  }
  elseif ($type === '2col_deck') {
    // The 2col deck column-sizes are not distributed evenly, so we have to
    // determine which column should be the largest and then set the class
    // based on that.
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];
    if ($paragraph->hasField('field_2col_column_size') && isset($paragraph->get('field_2col_column_size')->value)) {
      switch (_mungo_2col_size_option_to_text($paragraph->get('field_2col_column_size')->value)) {
        case '66_33':
          $variables['cols']['field_2col_deck_col1']['#attributes']['class'][] = 'col-md-8';
          $variables['cols']['field_2col_deck_col2']['#attributes']['class'][] = 'col-md-4';
          break;

        case '33_66':
          $variables['cols']['field_2col_deck_col1']['#attributes']['class'][] = 'col-md-4';
          $variables['cols']['field_2col_deck_col2']['#attributes']['class'][] = 'col-md-8';
          break;
      }
    }
  }
  elseif ($type === '3col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-sm-4';
      $col['#attributes']['class'][] = 'col-xs-12';
    }
    $variables['attributes']['class'][] = 'three-cols-deck';
  }
  elseif ($type === '4col_deck') {
    foreach ($variables['cols'] as &$col) {
      $col['#attributes']['class'][] = 'col-md-3';
      $col['#attributes']['class'][] = 'col-sm-6';
      $col['#attributes']['class'][] = 'col-xs-12';
    }
    $variables['attributes']['class'][] = 'four-cols-deck';
  }
}

/**
 * Implements hook_theme().
 */
function mungo_theme($existing, $type, $theme, $path) {
  return array(
    'social_links' => array(
      'variables' => array(
        'facebook_link' => NULL,
        'twitter_link' => NULL,
        'forward_link' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocessing of variables for various content-types.
 */
function mungo_preprocess_page(&$variables) {
  $variables['ddsdk_show_sizebar'] = Settings::get('ddsdk_show_sizebar', FALSE);
}
