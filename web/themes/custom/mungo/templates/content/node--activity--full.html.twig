{% extends "@mungo/layout/article-layout.twig" %}
{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Activity" it would result in "node--type-activity". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 * - facebook_appid: Facebook App id to use for social plugins
 * - facebook_comments: if specified facebook-comments are added after the
 *   and facebook_appid is expected to be present
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'print-full-width'
  ]
%}
{% block title_prefix %}
  <div class="node--keyword">
    {% if content.field_content_topic %}
      {{ content.field_content_topic }}
    {% endif %}
  </div>
{% endblock %}
{% block main_content_sidebar %}
  <footer class="node__meta author-presentation">
    {{ social_links }}
  </footer>
{% endblock %}
{% block main_content %}
  <!-- Activity main content -->
  <div class=" hidden-xs hidden-sm">{{ content.field_subtitle }}</div>

    {# We leave out any fields we've output manually at this point #}
    {# field_content_author is left out as it is a part of author_presentation #}
  {{ content | without('group_extra_info', 'field_activity_id', 'field_content_author', 'field_gallery_image', 'field_title', 'field_subtitle', 'field_main_media', 'field_sidedeck', 'field_content_topic' ) }}
  <!-- Image Slideshow -->
  {{ attach_library('mungo/flexslider') }}
  {% if content.field_gallery_image[0] %}
    <div class="field__label article-text">{% trans with {'context': 'activity'} -%}Gallery{%- endtrans %}:</div>
  {% endif %}
  <div class="dds-gallery">
    <div class="dds-gallery__slider">
      <ul class="slides">
        {% for key, item in content.field_gallery_image if key|first != '#' %}
          <li>{{ item }}</li>
        {% endfor %}
      </ul>
    </div>
  </div>
  <div class="dds-gallery__print">
    {% for key, item in content.field_gallery_image if key|first != '#' %}
      <div>{{ item }}</div>
    {% endfor %}
  </div>
{% endblock %}
{% block content_below_sidebar %}
  {% if facebook_comments %}
    <div class="facebook-comments">
      <div class="fb-comments" data-width="100%" data-href="{{ url('entity.node.canonical', {'node': node.id}) }}" data-numposts="10"></div>
    </div>
  {% endif %}
{% endblock %}

{% block body_head %}
  {% if facebook_comments %}
  <div id="fb-root"></div>
  <script>(function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/da_DK/sdk.js#xfbml=1&version=v2.8&appId={{ facebook_appid }}";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>
  {% endif %}
{% endblock %}

{% block sidebar %}
  <div class="box box--grey no-inline box--meta-info">
    <h2 class="box__heading">{% trans %}Extra information{% endtrans %}</h2>
    {{ content.group_extra_info }}
  </div>
  {% if (node.field_sidedeck) %}
    {{ content.field_sidedeck }}
  {% endif %}
{% endblock %}


