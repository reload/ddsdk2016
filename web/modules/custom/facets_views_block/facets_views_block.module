<?php

/**
 * @file
 * Add facets as views "blocks" for easier theming.
 */

/**
 * Implements hook_preprocess_views_view().
 *
 * Detect facets related to the view and inject them as render-arrays.
 */
function facets_views_block_preprocess_views_view(&$variables) {
  // Check if view is available at all.
  if (!isset($variables['view'])) {
    return;
  }

  // Acquire view information.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // Get the id and display of the view currently being viewed.
  $current_view_id = $view->id();
  $current_view_display = $view->current_display;

  // Ensure that we found both a view id and a display id.
  if (!$current_view_id || !$current_view_display) {
    return;
  }

  // Load facets grouped by facet sources.
  /** @var \Drupal\facets\FacetListBuilder $list_builder */
  $list_builder = \Drupal::service('entity.manager')->getListBuilder('facets_facet');
  // Note that this way of loading facets piggybacks on ListBuilder which is
  // mainly used to load entities for lists in the admin-interface. If we run
  // in to wird behaviour, start off by checking whether that behaviour is also
  // present in the backend, and search for issues regarding admin instead.
  // https://www.drupal.org/project/facets/issues/2920766 is a good example, dds
  // was seeing untranslated lables in the frontend, but the reported bug was
  // against the same behaviour in the admininterface.
  $groups = $list_builder->loadGroups();
  $group = NULL;

  $facet_source_plugin_manager = \Drupal::getContainer()
    ->get('plugin.manager.facets.facet_source');

  // Find any facets that matches the current view.
  foreach ($groups['facet_source_groups'] as $facet_source_id => $data) {
    /** @var \Drupal\facets\Plugin\facets\facet_source\SearchApiDisplay $facet_source */
    $facet_source = $facet_source_plugin_manager->createInstance($facet_source_id);

    // Determine the view the facet is associated with.
    $search_api_display_definition = $facet_source->getDisplay()->getPluginDefinition();
    if (empty($search_api_display_definition['view_id'])) {
      continue;
    }
    $facet_source_view_id = $search_api_display_definition['view_id'];
    $facet_display_view_id = $search_api_display_definition['view_display'];

    // If the facet matchee we've found what we're looking for.
    if ($facet_source_view_id === $current_view_id && $facet_display_view_id === $current_view_display) {
      $group = $data;
      break;
    }
  }

  // No source+facets, bail...
  if (!$group || empty($group['facets'])) {
    return;
  }

  // Moving field_group to the end of the array, if it exists.
  /** @var \Drupal\facets\Entity\Facet $facet */
  foreach ($group['facets'] as $facet_id => $facet) {
    if ($facet->getFieldIdentifier() === 'field_group') {
      unset($group['facets'][$facet_id]);
      $group['facets'][$facet_id] = $facet;

      break;
    }
  }

  // Load and build blocks for this view's facets.
  foreach ($group['facets'] as $facet_id => $facet) {
    // Let the facet_manager build the facets.
    $build = \Drupal::service('facets.manager')->build($facet);

    // Only render facets if there are any filters to display.
    if (!empty($build)) {
      // Get configuration for the facet.
      $facet_configs = \Drupal::entityTypeManager()->getStorage('facets_facet')->load($facet->getConfigTarget());
      // Get the name from the configuration where it will be translated.
      $name_from_config = $facet_configs->get('name');
      // Wrap facet widget in a "block"-ish wrapper.
      $variables['facets'][$facet_id] = [
        '#theme' => 'facets_views_block',
        '#id' => $facet_id,
        '#label' => $name_from_config,
        '#facet' => $build,
      ];
    }
  }

  if (!empty($variables['facets'])) {
    // Reorder the facets and exposed filters on the on various view pages.
    // TODO: Move this list of displays to a centralized place.
    // Same goes for the exposed filter functionality in: mungo_preprocess_views_view().
    $filter_callbacks = [
      'events' => '_facets_views_preprocess_event_filters',
      'activities' => '_facets_views_preprocess_activity_filters',
    ];

    if (isset($filter_callbacks[$current_view_id]) && function_exists($filter_callbacks[$current_view_id])) {
      $filter_callbacks[$current_view_id]($variables);
    }
  }
}

/**
 * Implements hook_theme().
 */
function facets_views_block_theme() {
  return [
    'facets_views_block' => [
      'template' => 'facets_views_block-facet',
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'facet' => NULL,
      ],
    ],
  ];
}

/**
 * Arrange Facets order and combine them with exposed filters.
 *
 * Order the exposed form in the "correct" order.
 * We add the facets to the exposed form, by rendering them and
 * adding them as markup in the form.
 */
function _facets_views_preprocess_event_filters(&$variables) {
  // Initialize weight.
  $weight = -1;

  // 1. search_text(exposed form).
  $variables['exposed']['search_text']['#weight'] = $weight++;
  $variables['exposed']['search_text']['#attributes']['placeholder'] = t('Search for events ...', [], ['context' => 'event search']);

  // 2. facets_event_type(facet).
  $variables['exposed']['facets_event_type'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($variables['facets']['event_type']),
    '#weight' => $weight++,
  ];

  // 3. facets_target_group(facet).
  $variables['exposed']['facets_target_group'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($variables['facets']['target_group']),
    '#weight' => $weight++,
  ];

  // 4. facets_target_group(facet).
  $variables['exposed']['facets_area'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($variables['facets']['area']),
    '#weight' => $weight++,
  ];

  // 5. event_after(exposed form).
  $variables['exposed']['event_after']['#weight'] = $weight++;
  $variables['exposed']['event_after']['#attributes']['placeholder'] = t('exclude results after this date ...');

  // 6. event_before(exposed form).
  $variables['exposed']['event_before']['#weight'] = $weight++;
  $variables['exposed']['event_before']['#attributes']['placeholder'] = t('exclude results before this date ...');
}

  /**
   * Arrange Facets order and combine them with exposed filters.
   *
   * Order the exposed form in the "correct" order.
   * We add the facets to the exposed form, by rendering them and
   * adding them as markup in the form.
   *
   * @param array $variables
   */
  function _facets_views_preprocess_activity_filters(&$variables) {
    // Initialize weight.
    $weight = -1;

    // 1. search_text(exposed form).
    $variables['exposed']['search_text']['#weight'] = $weight++;
    $variables['exposed']['search_text']['#attributes']['placeholder'] = t('Search for activities ...', [], ['context' => 'activity search']);

    // 2. facets_event_type(facet).
    $variables['exposed']['facets_duration'] = [
      '#type' => 'markup',
      '#markup' => \Drupal::service('renderer')->render($variables['facets']['duration']),
      '#weight' => $weight++,
    ];

    // 3. facets_activity_type(facet).
    $variables['exposed']['facets_activity_type'] = [
      '#type' => 'markup',
      '#markup' => \Drupal::service('renderer')->render($variables['facets']['activity_type']),
      '#weight' => $weight++,
    ];

    // 4. facets_target_group(facet).
    $variables['exposed']['facets_target_group'] = [
      '#type' => 'markup',
      '#markup' => \Drupal::service('renderer')->render($variables['facets']['badge_target_group']),
      '#weight' => $weight++,
    ];
  }

