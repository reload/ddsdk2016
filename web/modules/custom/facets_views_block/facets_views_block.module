<?php

/**
 * @file
 * Add facets as views "blocks" for easier theming.
 */

use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_views_view().
 *
 * Detect facets related to the view and inject them as render-arrays.
 */
function facets_views_block_preprocess_views_view(&$variables) {
  // Check if view is available at all.
  if (!isset($variables['view'])) {
    return;
  }

  // Acquire view information.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $view_id = $view->id();
  $view_display = $view->current_display;

  // Ensure that we found both a view id and a display id.
  if (!$view_id || !$view_display) {
    return;
  }

  // Load facets grouped by facet sources.
  /** @var \Drupal\facets\FacetListBuilder $list_builder */
  $list_builder = \Drupal::service('entity.manager')->getListBuilder('facets_facet');
  $groups = $list_builder->loadGroups();
  $group = NULL;
  foreach ($groups['facet_source_groups'] as $facet_source_id => $data) {
    if ($data['facet_source']['view_id'] == $view_id && $data['facet_source']['view_display'] == $view_display) {
      $group = $data;
      break;
    }
  }

  // No source+facets, bail...
  if (!$group || empty($group['facets'])) {
    return;
  }

  // Moving field_group to the end of the array, if it exists.
  /** @var \Drupal\facets\Entity\Facet $facet */
  foreach ($group['facets'] as $facet_id => $facet) {
    if ($facet->getFieldIdentifier() === 'field_group') {
      unset($group['facets'][$facet_id]);
      $group['facets'][$facet_id] = $facet;

      break;
    }
  }

  // Load and build blocks for this view's facets.
  foreach ($group['facets'] as $facet_id => $facet) {
    // Let the facet_manager build the facets.
    $build = \Drupal::service('facets.manager')->build($facet);

    // Only render facets if there are any filters to display.
    if (!empty($build)) {
      // Wrap facet widget in a "block"-ish wrapper.
      $variables['facets'][$facet_id] = [
        '#theme' => 'facets_views_block',
        '#id' => $facet_id,
        '#label' => $facet->getName(),
        '#facet' => $build,
      ];
    }
  }


  if (!empty($variables['facets'])) {
    // Reorder the facets and exposed filters on the events view page.
    if ($view_id === 'events') {
      $variables['exposed'] = _facets_views_preprocess_filters($variables['exposed'], $variables['facets']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function facets_views_block_theme() {
  return [
    'facets_views_block' => [
      'template' => 'facets_views_block-facet',
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'facet' => NULL,
      ],
    ],
  ];
}

/**
 * Arrange Facets order and combine them with exposed filters.
 *
 * Order the exposed form in the "correct" order.
 * We add the facets to the exposed form, by rendering them and
 * adding them as markup in the form.
 *
 * @param array $exposed_form
 *   The exposed form.
 * @param array $facets
 *   The facets in render arrays.
 *
 * @return array
 *   Returns a modified exposed form with facets elements included.
 */
function _facets_views_preprocess_filters($exposed_form, $facets) {

  // Initialize weight.
  $weight = -1;

  // 1. search_text(exposed form).
  $exposed_form['search_text']['#weight'] = $weight++;
  $exposed_form['search_text']['#attributes']['placeholder'] = t('Search for activities ...', [], ['context' => 'activity search']);

  // 2. facets_event_type(facet).
  $exposed_form['facets_event_type'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($facets['event_type']),
    '#weight' => $weight++,
  ];

  // 3. facets_target_group(facet).
  $exposed_form['facets_target_group'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($facets['target_group']),
    '#weight' => $weight++,
  ];

  // 4. facets_target_group(facet).
  $exposed_form['facets_area'] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->render($facets['area']),
    '#weight' => $weight++,
  ];

  // 5. event_after(exposed form).
  $exposed_form['event_after']['#weight'] = $weight++;
  $exposed_form['event_after']['#attributes']['placeholder'] = t('exclude results after this date ...');

  // 6. event_before(exposed form).
  $exposed_form['event_before']['#weight'] = $weight++;
  $exposed_form['event_before']['#attributes']['placeholder'] = t('exclude results before this date ...');

  return $exposed_form;
}
