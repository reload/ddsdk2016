<?php

/**
 * @file
 * Hooks and functionality for metatags (the module as well as the concept).
 */

use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_token_info().
 */
function dds_metatag_token_info() {
  $info = array();

  // Declare tokens we need for various metatags.
  $info['tokens'] = array(
    'node' => array(
      'main-media-video-thumbnail' => array(
        'name' => t('Video thumbnail'),
        'description' => t('Thumbnail for video'),
      ),
    ),
    'ddsdk' => array(
      'badge-overview-topimage' => array(
        'name' => t('Top image'),
        'description' => t('URL for the badge overview topimage'),
      ),
      'badge-overview-title' => array(
        'name' => t('Title'),
        'description' => t('Badge overview title'),
      ),
      'badge-overview-description' => array(
        'name' => t('Description'),
        'description' => t('Badge overview description'),
      ),
    ),
  );

  // Declare a root type for tokens that are not directly related to any
  // content.
  $info['types'] = array(
    'ddsdk' => array(
      'name' => t('dds.dk tokens'),
      'description' => t('Tokens specific for the dds.dk site'),
    ),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function dds_metatag_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  // Go looking for things to replace, replacements will be put in this array
  // if none are found we'll just return the empty array.
  $replacements = [];

  // Handle replacements related to main media.
  if ($type === 'node' && $data['node']->hasField('field_main_media') && !empty($data['node']->get('field_main_media')->first()->entity)) {
    /** @var \Drupal\media_entity\Entity\Media $main_media */
    $main_media = $data['node']->get('field_main_media')->first()->entity;

    // Get the uri for the thumbnail of either an image or a video.
    if (!empty($main_media) && $main_media->hasField('field_media_video_embed_field')) {
      $thumbnail_uri = dds_metatag_video_thumb_from_main_media($main_media);

      // Go looking for tokens to replace.
      foreach ($tokens as $name => $original) {
        switch ($name) {
          // Simple key values on the media_entity.
          case 'main-media-video-thumbnail':
            if (!empty($thumbnail_uri)) {
              $replacements[$original] = file_create_url($thumbnail_uri);
            }
            break;
        }
      }
    }
  }

  // Replace our root tokens (tokens not dependent on content).
  if ($type === 'ddsdk') {
    // Pull settings from the theme.
    $description = theme_get_setting('badge_page_description', 'mungo');
    $badge_cover_image_uri = theme_get_setting('badge_cover_image_path', 'mungo');
    $title = theme_get_setting('badge_page_title', 'mungo');

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'badge-overview-topimage':
          if (!empty($badge_cover_image_uri)) {
            $replacements[$original] = file_create_url($badge_cover_image_uri);
          }
          break;

        case 'badge-overview-description':
          if (!empty($description)) {
            $replacements[$original] = $description;
          }
          break;

        case 'badge-overview-title':
          if (!empty($title)) {
            $replacements[$original] = $title;
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Extracts a video thumbnail from a main_media field.
 *
 * @param \Drupal\media_entity\Entity\Media $media_entity
 *   The Main Media fields Media entity, has to have a
 *   field_media_video_embed_field field.
 *
 * @return string
 *   The URL for the video if found.
 */
function dds_metatag_video_thumb_from_main_media($media_entity): string {
  if (empty($media_entity) || ! $media_entity instanceof \Drupal\media_entity\Entity\Media || !$media_entity->hasField('field_media_video_embed_field')) {
    return NULL;
  }

  // Get the URL of the video.
  $url = $media_entity->field_media_video_embed_field->value;

  // Then use a provider to fetch the thumbnail for the video.
  $provider_manager = \Drupal::service('video_embed_field.provider_manager');
  /** @var \Drupal\video_embed_field\ProviderPluginInterface $provider */
  $provider = $provider_manager->loadProviderFromInput($url);
  if (!$provider) {
    return FALSE;
  }

  // If we've already downloaded the thumbnail, the following call will just
  // return the cached copy.
  $provider->downloadThumbnail();
  return $provider->getLocalThumbnailUri();
}
