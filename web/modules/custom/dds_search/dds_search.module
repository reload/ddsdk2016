<?php

/**
 * @file
 * Functionality for searches.
 */

use Drupal\Core\Form\FormStateInterface;

const DDS_SEARCH_DATE_USER_FORMAT = 'd/m/Y';
const DDS_SEARCH_DATE_EXECUTION_FORMAT = 'm/d/Y';

/**
 * Implements hook_form_alter().
 */
function dds_search_preprocess_views_view_unformatted(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  // If we're rendering the search views, result, setup column widths.
  if ($view->id() === 'search' && $view->current_display === 'content_search') {
    $variables['row_classes'] = ['col-md-4', 'col-sm-6', 'col-xs-12'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dds_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //
  // SITUATION: Search forms with facet filters and keywords search.
  // PROBLEM: When searching for a keyword after using a facet filter, the
  // facet filter is ignored by Views.
  // SOLUTION: Add facet filters as hidden form fields to Views exposed
  // forms.
  // Code below comes from https://www.drupal.org/node/1381524.
  // Only apply for search view.
  if (!in_array($form_state->get('view')->id(), ['search', 'events'])) {
    return;
  }

  // Only apply if any facet query parameters are provided.
  $facet_query = \Drupal::request()->query->filter('f');
  if (empty($facet_query)) {
    return;
  }

  // Iterate through facet query parameters.
  foreach ($facet_query as $key => $value) {
    // Add hidden form field for facet parameter.
    $form['f[' . $key . ']'] = array(
      '#type' => 'hidden',
      '#value' => $value,
      '#weight' => -1,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dds_search_form_alter(&$form, &$form_state, $form_id) {
  // Add a validate-function on the events form to.
  if ($form['#id'] === 'views-exposed-form-events-events-overview') {
    array_unshift($form['#validate'], 'dds_search_form_validate');
  }
}

/**
 * Validate call-back that reformats dates before a view is executed.
 */
function dds_search_form_validate(&$form, FormStateInterface &$form_state) {
  foreach (['event_after', 'event_before'] as $element) {
    if (!empty($form_state->getValue($element))) {
      $form_state->setValue($element, _dds_search_reformat_date_dk_to_us($form_state->getValue($element)));
    }
  }
}

/**
 * Reformats a date from d/m/Y to m/d/Y.
 */
function _dds_search_reformat_date_dk_to_us($value) {
  $date = DateTime::createFromFormat(DDS_SEARCH_DATE_USER_FORMAT, $value);
  return $date->format(DDS_SEARCH_DATE_EXECUTION_FORMAT);
}

/**
 * Reformats a date from m/d/Y to d/m/Y.
 */
function _dds_search_reformat_date_us_to_dk($value) {
  $date = DateTime::createFromFormat(DDS_SEARCH_DATE_EXECUTION_FORMAT, $value);
  return $date->format(DDS_SEARCH_DATE_USER_FORMAT);
}

/**
 * Implements hook_views_pre_render().
 *
 * Re-format date field used in the view before rendering the pager.
 */
function dds_search_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // We've formatted the date from DK to US in a previous submit hook, but now
  // as we want to render the view and eg. pagers with a "human"-readable
  // format.
  foreach (['event_after', 'event_before'] as $field) {
    if (!empty($view->exposed_raw_input[$field])) {
      $view->exposed_raw_input[$field] = _dds_search_reformat_date_us_to_dk($view->exposed_raw_input[$field]);
    }
  }
}
