<?php

/**
 * @file
 * Hooks and functionality for the Track universe.
 */

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare the html for the track universe context.
 */
function dds_track_preprocess_html(&$variables) {
  if (!_dds_track_page_is_track_universe() || \Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');

  // Attach a general class we can use to style things like the header.
  $variables['attributes']['class'][] = 'page-type-universe';
  // Attach a specific track class that let us know at a high level what track
  // the node is.
  $variables['attributes']['class'][] = 'universe-' . _dds_track_get_track_universe($node);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Attach a html class to the node, if it's in a track-universe context.
 * This allows us to target nodes in teasers etc.
 */
function dds_track_preprocess_node(&$variables) {
  _dds_track_prepare_node_teaser($variables);
  _dds_track_prepare_node_full($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dds_track_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] != 'system_branding_block') {
    return;
  }

  if (!_dds_track_page_is_track_universe()) {
    return;
  }

  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $variables['track_logo'] = base_path() . $theme_path . '/assets/images/track/logo.svg';
}

/**
 * Helper function to check if the current node is in a track-context.
 *
 * @return bool
 *   Whether the current node is a track-universe or not.
 */
function _dds_track_page_is_track_universe(): bool {
  if (empty(\Drupal::routeMatch()->getParameter('node'))) {
    return FALSE;
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node->hasField('field_content_topic') &&
    !$node->hasField('field_content_target_group')) {
    return FALSE;
  }

  return _dds_track_has_required_tags($node);
}

/**
 * Helper function to get the selected track-universe.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The drupal node.
 *
 * @return string
 *   The name of the selected track-universe.
 */
function _dds_track_get_track_universe(Node $node): string {
  $target_group_field = $node->get('field_content_topic')->getString();
  $target_group_term = Term::load($target_group_field);
  return _dds_track_get_universe_options()[$target_group_term->id()];
}

/**
 * Helper function to get the possible values for the track universe.
 *
 * @return string[]
 *   Return an array of the possible options for the Track universe.
 */
function _dds_track_get_universe_options(): array {
  return [
    834 => 'track-skills',
    187 => 'track-patrol',
    82 => 'track-events',
    71 => 'track-adventure',
  ];
}

/**
 * Helper function to prepare track nodes in teasers.
 */
function _dds_track_prepare_node_teaser(&$variables) {
  if (empty($variables['node']) || !$variables['node'] instanceof Node) {
    return $variables;
  }

  // Bail out if view mode is not a teaser.
  if ($variables['view_mode'] === 'full' || $variables['view_mode'] === 'preview') {
    return $variables;
  }

  $node = $variables['node'];
  if (!$node->hasField('field_content_topic')) {
    return $variables;
  }

  if (_dds_track_has_required_tags($node)) {
    $variables['attributes']['class'][] = 'track-teaser';
    $variables['attributes']['class'][] = _dds_track_get_track_universe($node);
  }
}

/**
 * Helper function to check if node meets track-context requirements.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node to check for.
 *
 * @return bool
 *   Returns true if the node has both the target_group and topic tag.
 *   Returns false otherwise.
 */
function _dds_track_has_required_tags(Node $node): bool {
  $field_content_target_group_terms = $node->get('field_content_target_group')->getValue();
  $has_target_group = FALSE;
  foreach ($field_content_target_group_terms as $target_group_term) {
    if (intval($target_group_term['target_id']) != _dds_track_get_track_term_id()) {
      continue;
    }

    $has_target_group = intval($target_group_term['target_id']) == _dds_track_get_track_term_id();
  }

  $content_topic = $node->get('field_content_topic')->getString();
  $has_track_topic = array_key_exists(intval($content_topic), _dds_track_get_universe_options());

  return $has_track_topic && $has_target_group;
}


/**
 * Helper function to prepare track nodes in full view mode.
 */
function _dds_track_prepare_node_full(&$variables) {
  if ($variables['view_mode'] !== 'full') {
    return $variables;
  }

  if (!_dds_track_page_is_track_universe()) {
    return $variables;
  }

  $variables['is_track_page'] = _dds_track_page_is_track_universe();
  $variables['track_universe'] = _dds_track_get_track_universe($variables['node']);
}

/**
 * Helper function to get id of "Track" term.
 *
 * Since the name of the "Track" term can change, this is a helper function that
 * returns the id of the term associated with the "Track" term.
 *
 * @return int
 *   The id of the "Track" term.
 */
function _dds_track_get_track_term_id(): int {
  return 826;
}
