<?php

/**
 * @file
 * Functionality to support layouting of paragraphs.
 */

use Drupal\Core\Entity\Entity;

/**
 * Implements hook_preprocess_HOOK().
 *
 * - Clean up paragraph class-names.
 */
function dds_layout_preprocess_paragraph(&$variables) {
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  if ($paragraph_type === '2col_deck') {
    $variables['attributes']['class'][] = 'deck';
    $variables['attributes']['class'][] = 'deck--2col';

  }
  elseif ($paragraph->getType() === 'dynamic_deck') {
    $variables['attributes']['class'][] = 'deck';
    $variables['attributes']['class'][] = 'deck--dynamic';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * - Clean up classes for decks and their columns.
 */
function dds_layout_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  // Prepare the item-count and bundle if available.
  $item_count = isset($variables['items']) && is_array($variables['items']) ? count($variables['items']) : 0;
  $bundle = isset($variables['element']['#bundle']) ? $variables['element']['#bundle'] : NULL;
  $object = isset($variables['element']['#object']) ? $variables['element']['#object'] : NULL;
  $size = NULL;

  if ($object instanceof Entity && $object->hasField('field_2col_column_size') && isset($object->field_2col_column_size->value)) {
    $size = _mungo_2col_size_option_to_text($object->field_2col_column_size->value);
  }

  // Handle 2col.
  if ($bundle === '2col_deck') {
    if ($size === "33_66" && $field_name === 'field_2col_deck_col1') {
      $variables['attributes']['class'][] = 'deck__column--white-background';
    }

    if ($size === "66_33" && $field_name === 'field_2col_deck_col2') {
      $variables['attributes']['class'][] = 'deck__column--white-background';
    }

    if ($field_name === 'field_2col_deck_col1') {
      $variables['attributes']['class'][] = 'deck__column';
      $variables['attributes']['class'][] = 'deck__column--left';
      $variables['attributes']['data-item-count'] = $item_count;
    }
    elseif ($field_name === 'field_2col_deck_col2') {
      $variables['attributes']['class'][] = 'deck__column';
      $variables['attributes']['class'][] = 'deck__column--right';
      $variables['attributes']['data-item-count'] = $item_count;
    }
  }
  // Handle dynamic decks (with 1 column)
  elseif ($bundle === 'dynamic_deck') {
    if ($field_name === 'field_paragraphs') {
      $variables['attributes']['class'][] = 'deck__column';
      $variables['attributes']['data-item-count'] = $item_count;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dds_layout_form_alter(&$form, $form_state, $form_id) {
  // Move the side-deck field into the edit-forms sidebar (aka the
  // "advanced" group).
  // We match node_<nodetype>_edit_form as well as node_<nodetype>_form.
  if (preg_match('#^node_([_a-z]+)(_edit)?_form$#', $form_id)) {

    // Put the sidedeck field in the sidebar.
    if (isset($form['field_sidedeck'])) {
      $form['sidedeck_group'] = array(
        '#type' => 'details',
        '#title' => t('Sidedeck'),
        '#description' => t(
          'Content that should be displayed in the side-deck.'
        ),
        '#group' => 'advanced',
        '#open' => FALSE,
        // Push it all the way to the bottom.
        '#weight' => -999,
      );

      $form['field_sidedeck']['#group'] = 'sidedeck_group';
    }

    // Put meta-fields in the side_deck.
    $content_meta_keys = [
      'field_article_type',
      'field_badge_target_group',
      'field_content_author',
      'field_content_tag',
      'field_content_target_group',
      'field_content_topic',
      'field_content_category',
    ];
    if (!empty(array_intersect($content_meta_keys, array_keys($form)))) {

      // Create content meta advanced group.
      $form['advanced_content_meta'] = array(
        '#type' => 'details',
        '#title' => t('Content meta'),
        '#group' => 'advanced',
        '#open' => TRUE,
        // Push it all the way to the top.
        '#weight' => -1000,
      );

      // Then put each of the fields in the newly created group.
      foreach ($content_meta_keys as $key) {
        $form[$key]['#group'] = 'advanced_content_meta';
      }
    }

    if (!empty($form['field_content_target_group'])) {
      $form['field_content_target_group']['#chosen'] = TRUE;
    }

  }

}
