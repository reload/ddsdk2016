version: '3'

services:
  # Pure web-server, hands php-requests off to fpm.
  web:
    image: reload/drupal-apache-fpm:latest
    ports:
      - '80'
      - '443'
    depends_on:
      - fpm
    volumes:
      - 'projectroot:/var/www/'
      - '${HOME}/.local/share/mkcert:/mkcert:ro'
      - '${HOME}/.local/share/dev_certificates:/cert:rw'
      # Temporary mount for the cron-configuration, we'll copy it into place
      # with correct ownership via the init-script.
      - './docker/cron/drupal-cron:/root/tmp.drupal-cron:ro'
      - './docker/cron/setup-cron.sh:/etc/my_init.d/setup-cron.sh'
    environment:
      VIRTUAL_PROTO: http
      VIRTUAL_HOST: ddsdk.docker
      # Ensure dory/nginx-proxy goes via port 80.
      VIRTUAL_PORT: '80'
      # Ensure dory don't redirect from http to https.
      HTTPS_METHOD: noredirect
      MKCERT_DOMAINS: "ddsdk.docker ddsdk.local"

  # Instance of the php-image configured to serve fpm-requests.
  fpm:
    image: reload/drupal-php7-fpm:7.3
    ports:
      - '9000'
    volumes:
      - 'projectroot:/var/www/'
    depends_on:
      - db
      - redis
    working_dir: /var/www/web
    environment:
      PATH: '/var/www/vendor/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      PHP_SENDMAIL_PATH: /usr/local/bin/mhsendmail --smtp-addr="mailhog:1025"
      DRUSH_OPTIONS_URI: https://ddsdk.docker
      COMPOSER_MEMORY_LIMIT: "-1"
      XDEBUG_MODE: "debug,develop"
      XDEBUG_CONFIG: "client_host=host.docker.internal"
      discover_client_host: "0"

  # Mariadb database, initialized with a nighly pre-build datadir.
  db:
    image: mariadb:10
    ports:
      - '3306'
    volumes:
      - './my.ini:/etc/mysql/conf.d/my.cnf'
      - './docker/init/ZZZ-finished-init.sh:/docker-entrypoint-initdb.d/ZZZ-finished-init.sh'
      # Fake healthy state as we're using datadirs.
      - './docker-compose.yml:/tmp/docker-finished-init:ro'
      - 'db-datadir:/var/lib/mysql'

    depends_on:
      - db-data
    # Comment the lines depends_on and add the following to volumes if you want
    # to import a custom databasedump
    #    - './docker/my-custom-db-dump.sql:/docker-entrypoint-initdb.d/100-db.sql'
    healthcheck:
      test: ["CMD", "sh", "-c", "[ -e /tmp/docker-finished-init ]"]

    # using a raw mariadb image. We're just leaving the values used during
    # the datadir build here for reference.
    # see https://github.com/reload/docker-db-datadir-worker/blob/master/opt/datadir-preinit/docker-compose.template.yml
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db
      MYSQL_USER: db
      MYSQL_PASSWORD: db

  # Nightly fetched dump.
  db-data:
    image: eu.gcr.io/reloaddk-data/db-datadir:ddsdk-latest
    volumes:
      # Will be empty at reset, this will cause docker to copy the contents of
      # /var/lib/mysql into the db-datadir container. As the "db" service depends
      # on db-data, it will wait until this has completed, and the mount db-datadir
      - 'db-datadir:/var/lib/mysql'

  redis:
    image: redis:5.0
    ports:
      - '6379'

  solr:
    image: solr:8.6
    ports:
      - '8983'
    volumes:
      - './.platform/solr_8.x_config:/solr-conf/conf:ro'
    environment:
      VIRTUAL_HOST: solr.ddsdk.docker
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - ddsmainindex
      - /solr-conf

  mailhog:
    image: mailhog/mailhog
    ports:
      - '8025'
    environment:
      VIRTUAL_HOST: mail.ddsdk.docker

  npm:
    image: node:9-slim
    volumes:
      - 'projectroot:/var/www/'
      - 'cache:/npm-cache'
    working_dir: /var/www
    environment:
      PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      npm_config_cache: '/npm-cache/node'
    entrypoint: "/bin/sh -c 'npm run build && npm run watch'"

volumes:
  # NPM cache that survives docker-reset.sh
  cache:
  db-datadir:
  projectroot:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}
      o: bind
